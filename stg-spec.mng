\documentclass{article}

\usepackage{supertabular}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{stmaryrd}
\usepackage{xcolor}
\usepackage{fullpage}
\usepackage{multirow}
\usepackage{url}

\newcommand{\ghcfile}[1]{\textsl{#1}}
\newcommand{\arraylabel}[1]{\multicolumn{2}{l}{\!\!\!\!\!\!\!\!\!\text{\underline{#1}:}}}

\input{StgOtt}

% increase spacing between rules for ease of reading:
\renewcommand{\ottusedrule}[1]{\[#1\]\\[1ex]}

\setlength{\parindent}{0in}
\setlength{\parskip}{1ex}

\newcommand{\gram}[1]{\ottgrammartabular{#1\ottafterlastrule}}

\begin{document}

\begin{center}
\LARGE
The Spineless Tagless G-machine, as implemented in GHC.\\
\Large 7 September, 2013
\end{center}

\section{Introduction}

This document presents the syntax of STG, and the cost semantics utilized
for profiling.  While this document will be primarily useful for people
looking to work profiling in GHC, the hope is that this will eventually
expanded to also have operational semantics for modern STG.

While care has been taken to adhere to the behavior in GHC, these rules
have not yet been used to perform any proofs.  There are some details
elided from this presentation, especially extra annotated data in the
STG data type itself which is useful for code generation but not
strictly necessary.

\section{Grammar}

\subsection{Metavariables}

We will use the following metavariables:

\ottmetavars{}\\

\subsection{Preliminaries}

Literals do not play a big role, so they are kept abstract:

\gram{\ottlit}

Primitive operations and foreign calls can influence the costs of
an application, but because their behavior depends on the specific
operation in question, they are kept abstract for simplicity's sake.

\gram{\ottop}

Cost-centres for profiling:

\gram{\ottcc}

\gram{\ottccs}

Arguments in STG are restricted to be literals or variables:

\gram{\otta}

\subsection{Expressions}

The datatype that represents expressions:

\gram{\otte}

Bindings for let statements:

\gram{\ottbinding}

Valid right-hand-sides of bindings:

\gram{\ottrhs}

Update flags for closures:

\gram{\ottupd}

Case alternatives:

\gram{\ottalt}

\section{Cost semantics}

\ottdefncost{}

Note the implementations of StgApp are splattered across two
different calling conventions for functions: slow calls and
direct calls.  Direct calls handle saturated and over-applied
cases (\coderef{codeGen/StgCmmLayout.hs}{slowArgs}), while slow
calls handle all cases (\textit{utils/genapply/GenApply.hs});
in particular, these cases ensure that the current cost-center
reverts to the one originally at the call site.

\end{document}
